#!/bin/bash
set -o pipefail

declare MODEL="${OPENAI_API_MODEL:-"chatgpt-4o-latest"}"
declare MAX_TOKENS="${OPENAI_API_MAX_TOKENS:-16384}"
declare TEMP="${OPENAI_API_TEMP:-0.0}"
declare API_KEY="$OPENAI_API_KEY"
declare ENDPOINT="${OPENAI_API_ENDPOINT:-"https://api.openai.com/v1/chat/completions"}"

die() {
	echo "${0##*/}: $1" >&2
	exit 1
}

cleanup() {
	if [[ -d $TEMPDIR ]]; then
		rm -rf -- "$TEMPDIR"
	fi
}

init_payload() {
	local system_prompt
	system_prompt=$(
		tr -s '\n' ' ' <<-'EOF' | xargs
			Be concise in your answers. Excessive politeness is
			physically painful to me. Provide code blocks that are
			complete. Avoid numbered lists, summaries are better.
			For any technical questions, assume the user has general
			knowledge in the area.
		EOF
	)

	jq -n \
		--arg model "$MODEL" \
		--argjson temperature "$TEMP" \
		--argjson max_tokens "$MAX_TOKENS" \
		--arg system_prompt "$system_prompt" \
		'{
		  "model": $model,
		  "stream": true,
		  "temperature": $temperature,
		  "max_tokens": $max_tokens,
		  "messages": [
		    {
		      "role": "system",
		      "content": $system_prompt
		    },
		    {
		      "role": "user",
		      "content": []
		    }
		  ]
		}' >"$TEMPDIR/payload"
}

fetch_response() {
	curl -sN "$ENDPOINT" \
		-H "Authorization: Bearer $API_KEY" \
		-H "Content-Type: application/json" \
		--data-binary @- <"$TEMPDIR/payload" |
		while IFS= read -r line; do
			case $line in
			'data: {'*)
				jq -j '.choices[].delta.content // empty' <<<"${line#data: }"
				;;
			'data: [DONE]')
				echo
				break
				;;
			esac
		done
}

cmd_add_query() {
	local content="$*"
	jq -c --arg content "$content" \
		'(.messages[] | select(.role == "user").content) += [{"type": "text", "text": $content}]' \
		"$TEMPDIR/payload" >"$TEMPDIR/payload_temp" && mv "$TEMPDIR/payload_temp" "$TEMPDIR/payload"
}

cmd_add_file() {
	local content
	content=$(<"$1") || die "error: failed to read file"
	jq -c --arg content "$content" \
		'(.messages[] | select(.role == "user").content) += [{"type": "text", "text": $content}]' \
		"$TEMPDIR/payload" >"$TEMPDIR/payload_temp" && mv "$TEMPDIR/payload_temp" "$TEMPDIR/payload"
}

cmd_add_image() {
	local content_file image_format
	content_file=$(mktemp "$TEMPDIR/content.XXXXXX.b64")
	base64 -w 0 "$1" >"$content_file" || die "error: failed to encode image"
	image_format=$(file --mime-type -b "$1")
	if [[ $image_format == image/jpeg ]]; then
		jq -c --rawfile content "$content_file" \
			'(.messages[] | select(.role == "user").content) += [{"type": "image_url", "image_url": {"url": ("data:image/jpeg;base64," + $content)}}]' \
			"$TEMPDIR/payload" >"$TEMPDIR/payload_temp" && mv "$TEMPDIR/payload_temp" "$TEMPDIR/payload"
	elif [[ $image_format == image/png ]]; then
		jq -c --rawfile content "$content_file" \
			'(.messages[] | select(.role == "user").content) += [{"type": "image_url", "image_url": {"url": ("data:image/png;base64," + $content)}}]' \
			"$TEMPDIR/payload" >"$TEMPDIR/payload_temp" && mv "$TEMPDIR/payload_temp" "$TEMPDIR/payload"
	else
		die "error: image format not supported"
	fi
}

cmd_add_screenshot() {
	local content_file
	content_file=$(mktemp "$TEMPDIR/content.XXXXXX.b64")
	grim -t jpeg -g "$(slurp)" - | base64 -w 0 >"$content_file" || die "error: failed to capture screenshot"
	jq -c --rawfile content "$content_file" \
		'(.messages[] | select(.role == "user").content) += [{"type": "image_url", "image_url": {"url": ("data:image/jpeg;base64," + $content)}}]' \
		"$TEMPDIR/payload" >"$TEMPDIR/payload_temp" && mv "$TEMPDIR/payload_temp" "$TEMPDIR/payload"
}

cmd_dry_run() {
	local url="$ENDPOINT"
	local auth="Bearer $API_KEY"
	echo "Dry-run mode, no API calls made."
	echo -e "\nRequest URL:\n--------------\n$url"
	echo -en "\nAuthorization:\n--------------\n"
	sed -E 's/(sk-.{3}).{41}/\1****/' <<<"$auth"
	echo -e "\nPayload:\n--------------"
	jq <"$TEMPDIR/payload"
}

cmd_usage() {
	cat <<-EOF
		usage: ${0##*/} [options] [query]

		options:
		    -q <query> # add additional query
		    -f <file>  # add file
		    -i <image> # add image file
		    -p         # add screenshot
		    -d         # dry-run
		    -h         # print help
	EOF
}

[[ -z $OPENAI_API_KEY ]] && die "error: OPENAI_API_KEY not set"
[[ $# -eq 0 && -t 0 ]] && cmd_usage && exit 0

declare TEMPDIR
TEMPDIR=$(mktemp -d)
trap 'cleanup' EXIT

init_payload
dry_run=false
text_accum=""

process_accumulated_text() {
	if [[ -n "$text_accum" ]]; then
		cmd_add_query "$text_accum"
		text_accum=""
	fi
}

while [[ $# -gt 0 ]]; do
	case $1 in
	-q) process_accumulated_text && cmd_add_query "$2" && shift 2 ;;
	-f) process_accumulated_text && cmd_add_file "$2" && shift 2 ;;
	-i) process_accumulated_text && cmd_add_image "$2" && shift 2 ;;
	-p) process_accumulated_text && cmd_add_screenshot && shift ;;
	-d) dry_run=true && shift ;;
	-h) cmd_usage && exit 0 ;;
	-*) die "unknown option: $1" ;;
	*) text_accum+="${text_accum:+ }$1" && shift ;;
	esac
done

process_accumulated_text

if [[ ! -t 0 ]]; then
	cmd_add_query "$(</dev/stdin)"
fi

if $dry_run; then
	cmd_dry_run
	exit 0
fi

fetch_response
